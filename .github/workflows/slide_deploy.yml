name: marp-to-pages
concurrency: marp-to-pages

on:
  push:
    branches: [ main ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure build dir exists
        run: mkdir -p build

      - name: Copy images directory (if exists)
        run: if [[ -d img ]]; then cp -R img build/img; fi

      # - name: Marp Build (README)
      #   uses: docker://marpteam/marp-cli:v3.0.2
      #   with:
      #     args: README.md -o build/index.html
      #   env:
      #     MARP_USER: root:root

      # - name: Marp Build (README.pdf)
      #   uses: docker://marpteam/marp-cli:v3.0.2
      #   with:
      #     args: README.md --allow-local-files -o build/README.pdf
      #   env:
      #     MARP_USER: root:root

      # - name: Marp Build (README.pptx)
      #   uses: docker://marpteam/marp-cli:v3.0.2
      #   with:
      #     args: README.md --allow-local-files -o build/README.pptx
      #   env:
      #     MARP_USER: root:root

      - name: Check if docs folder exists
        id: docs-folder-exists
        run: bash -c "[[ -d docs ]] ; echo \"has_docs=\$?\" >> \"$GITHUB_OUTPUT\""

      - name: Marp Build (docs folder, if exists)
        if: steps.docs-folder-exists.outputs.has_docs == '0'
        uses: docker://marpteam/marp-cli:v3.0.2
        with:
          args: -I docs/ -o build/docs/
        env:
          MARP_USER: root:root

      - name: Marp Build pdf (docs folder, if exists)
        if: steps.docs-folder-exists.outputs.has_docs == '0'
        uses: docker://marpteam/marp-cli:v3.0.2
        with:
          args: --pdf-notes -I docs/ -o build/docs/
        env:
          MARP_USER: root:root
      
      - name: make index
        if: steps.docs-folder-exists.outputs.has_docs == '0'
        run: |
              #! /bin/bash
              pwd
              ls
              cd build

              updated_at=`TZ="Asia/Tokyo" date "+%Y/%m/%d %H:%M"`

              cat << HTML > index.html
              <!DOCTYPE html>
              <html lang="ja-JP">
              <head>
                <meta charset="utf-8">
                <title>PRESENTATIONS</title>
                <link rel="stylesheet" href="./style.css">
                <meta name="viewport" content="width=device-width">
              </head>
              <body>
              <h1>プレゼンテーションアーカイブ</h1>
              <ul>
              HTML
              for file in `find -name "*.md" | sed 's/\.md//g'`; do
                title=`grep "title:" $file.md | cut -f2 -d":" | xargs`
                #title=`echo $file | rev | cut -d '/' -f 1 | cut -d '.' -f2- | rev`
                echo -e "$file\t\t$title"
                cat << HTML >> index.html
                <li>
                  <a href="$file.html" target="_blank">$title</a>
                  <span>
                    [<a href="$file.md" target="_blank">markdown</a>]
                    [<a href="$file.pdf" target="_blank">PDF</a>]
                  </span>
                </li>
              HTML
              done

              cat << HTML >> index.html
              </ul>
              </body>
              </html>
              HTML

      - name: Deploy preview
        if: ${{ github.event_name == 'pull_request' }}
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build/
          preview-branch: gh-pages
          umbrella-dir: pr-preview

      - name: Deploy production
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ./build/
          clean-exclude: pr-preview/